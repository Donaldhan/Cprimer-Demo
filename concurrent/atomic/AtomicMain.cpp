
/*
 * 原子操作指“不可分割的操作”，也就是说这种操作状态要么是完成的，要么是没完成的，
 * 不存在“操作完成了一半”这种状况。互斥量的加锁一般是针对一个代码段，
 * 而原子操作针对的一般都是一个变量(操作变量时加锁防止他人干扰)。
 * std::atomic<>是一个模板类，使用该模板类实例化的对象，提供了一些保证原子性的成员函数来实现共享数据的常用操作。
 * 提到std::atomic<>，你脑海里就想到一点就可以了：std::atomic<>用来定义一个自动加锁解锁的共享变量（“定义”“变量”用词在这里是不准确的，
 * 但是更加贴切它的实际功能），供多个线程访问而不发生冲突。
 *
 * std::atomic<>对象提供了常见的原子操作（通过调用成员函数实现对数据的原子操作）：
 * store是原子写操作，load是原子读操作。exchange是于两个数值进行交换的原子操作。
 * 即使使用了std::atomic<>，也要注意执行的操作是否支持原子性，也就是说，你不要觉得用的是具有原子性的变量（准确说是对象）就可以为所欲为了，
 * 你对它进行的运算不支持原子性的话，也不能实现其原子效果。一般针对++，–，+=，-=，&=，|=，^=是支持的，
 * 这些原子操作是通过在std::atomic<>对象内部进行运算符重载实现的。
 *
 *
 * @ClassName: AtomicMain
 * @Description:    
 * @Author:  Ravitn
 * @Date: 2021-03-05 14:13
*/


